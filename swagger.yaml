openapi: 3.0.3
info:
  title: MAFIA API
  description: API for locating health facilities, booking appointments, managing users, services, and blog content.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: https://mafia-api-93cm.onrender.com

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required: [fullName, email, contact, password]
      properties:
        fullName:
          type: string
        email:
          type: string
        contact:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [user, facility_admin, superadmin]
        isEmailVerified:
          type: boolean

    Facility:
      type: object
      required: [name, type, location]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [hospital, pharmacy]
        location:
          type: object
          properties:
            address: { type: string }
            city: { type: string }
            coordinates:
              type: object
              properties:
                latitude: { type: number }
                longitude: { type: number }

    Service:
      type: object
      required: [name, type, facility]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [medication, vaccine, test]
        facility:
          type: string
        stock:
          type: object
          properties:
            quantity: { type: integer }
            status: { type: string }
        price:
          type: object
          properties:
            amount: { type: number }
            currency: { type: string }

    Appointment:
      type: object
      required: [facility, service, appointmentDate, timeSlot, reason]
      properties:
        facility:
          type: string
        service:
          type: string
        appointmentDate:
          type: string
          format: date
        timeSlot:
          type: object
          properties:
            start: { type: string }
            end: { type: string }
        reason:
          type: string

    Review:
      type: object
      required: [facility, rating, comment]
      properties:
        facility: { type: string }
        rating: { type: integer }
        comment: { type: string }

    Blog:
      type: object
      required: [title, content, excerpt, category]
      properties:
        title: { type: string }
        content: { type: string }
        excerpt: { type: string }
        category:
          type: string
          enum: [health_education, emergency_preparedness, general]

paths:

  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User registered
        400:
          description: Validation error

  /api/auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        200:
          description: Login successful
        400:
          description: Invalid credentials

  /users/me:
    get:
      summary: Get logged-in user's profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User data returned

  /facilities:
    post:
      summary: Create new facility
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Facility'
      responses:
        201:
          description: Facility created

    get:
      summary: List all facilities
      responses:
        200:
          description: Facility list returned

  /facilities/{id}:
    get:
      summary: Get facility by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Facility data

    patch:
      summary: Update a facility
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Facility'
      responses:
        200:
          description: Facility updated

    delete:
      summary: Delete a facility
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted

  /services:
    post:
      summary: Create service
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        201:
          description: Created

    get:
      summary: List all services
      responses:
        200:
          description: Service list

  /appointments:
    post:
      summary: Book an appointment
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        201:
          description: Appointment booked

    get:
      summary: Get userâ€™s appointments
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of appointments

  /blogs:
    post:
      summary: Create a blog post
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        201:
          description: Blog created

    get:
      summary: List all blog posts
      responses:
        200:
          description: List of blogs

  /reviews:
    post:
      summary: Submit a review
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        201:
          description: Review created

    get:
      summary: Get all reviews
      responses:
        200:
          description: Reviews list

  /chatbot:
    post:
      summary: Chat with the AI assistant
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        200:
          description: Bot response
        400:
          description: Message required
        500:
          description: Failed to get chatbot response
